// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  password       String // Hashed password
  role           Role      @default(USER)

  // Police Officer specific fields
  designation    String?
  dateOfBirth    DateTime?
  gender         String?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  profile        Profile?

  moodEntries    MoodEntry[]
  surveyAnswers  SurveyAnswer[]
  chatSessions   ChatSession[]
  learningProgress LearningProgress[]
  notifications  Notification[]
}

model Profile {
  id            String    @id @default(uuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  avatar        String?
  bio           String?
  preferences   Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model MoodEntry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  mood      String
  notes     String?
  createdAt DateTime @default(now())
}

model Survey {
  id        String   @id @default(cuid())
  title     String
  questions Json
  createdAt DateTime @default(now())
}

model SurveyAnswer {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  surveyId  String
  answers   Json
  createdAt DateTime @default(now())
}

model ChatSession {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  startTime DateTime  @default(now())
  endTime   DateTime?
  messages  ChatMessage[]
}

model ChatMessage {
  id          String      @id @default(cuid())
  sessionId   String
  session     ChatSession @relation(fields: [sessionId], references: [id])
  sender      String // "user" or "ai"
  message     String
  timestamp   DateTime    @default(now())
}

model LearningResource {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String // "article", "video", "activity"
  content     String
  url         String?
  createdAt   DateTime @default(now())
  progress    LearningProgress[]
}

model LearningProgress {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  resourceId String
  resource   LearningResource @relation(fields: [resourceId], references: [id])
  completed  Boolean  @default(false)
  progress   Float    @default(0) // e.g., percentage for videos
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  POLICE_OFFICER
} 